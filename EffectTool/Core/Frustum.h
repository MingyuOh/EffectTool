#pragma once
#include "CoreSTD.h"
#include "Box.h"

enum T_POSITION
{
	P_BACK = 0,		// 점이 평면 뒤에 위치한다.
	P_FRONT,		// 점이 평면 앞에 위치한다.
	P_ONPLANE,		// 점이 평면 위에 위치한다.
	P_SPANNING		// 점이 평면에 걸친다.
};

class Frustum
{
public:
	//--------------------------------------------------------------------------------------
	// 월드, 뷰, 투영 행렬
	//--------------------------------------------------------------------------------------
	TMatrix					m_matView;
	TMatrix					m_matProj;
	TMatrix					m_matWorld;
	TMatrix					m_matViewProj;
	//--------------------------------------------------------------------------------------
	// 프러스텀 정점 8개
	//--------------------------------------------------------------------------------------
	TVector3					m_vFrustum[8];
	//--------------------------------------------------------------------------------------
	// 버텍스 리스트
	//--------------------------------------------------------------------------------------
	vector<PNCT_VERTEX>			m_VertexList;
	//--------------------------------------------------------------------------------------
	// 프러스텀을 구성하는 6개의 평면
	//--------------------------------------------------------------------------------------
	CollisionPlane				m_Plane[6];
	//--------------------------------------------------------------------------------------
	// 프러스텀을 구성하는 박스
	//--------------------------------------------------------------------------------------
	Box*						m_pBoxShape;
	//--------------------------------------------------------------------------------------
	// 디바이스 객체
	//--------------------------------------------------------------------------------------
	ComPtr<ID3D11Device>		m_pd3dDevice;
	//--------------------------------------------------------------------------------------
	// Near Center
	//--------------------------------------------------------------------------------------
	TVector3					m_vNearCenter;
	//--------------------------------------------------------------------------------------
	// 픽셀쉐이더
	//--------------------------------------------------------------------------------------
	ComPtr<ID3D11PixelShader>	m_pPixelShader;
public:
	//--------------------------------------------------------------------------------------
	// 평면으로부터 떨어진 정점의 거리를 구하는 함수
	//--------------------------------------------------------------------------------------
	bool					ClassifyPoint(TVector3* pv);
	//--------------------------------------------------------------------------------------
	// 평면으로부터 떨어진 원의 거리를 구하는 함수
	//--------------------------------------------------------------------------------------
	bool					ClassifySphere(CollisionSphere* pSphere);
	void					SeTMatrix(TMatrix* pWorld, TMatrix* pView, TMatrix* pProj);
	bool					CreateRenderBox(ID3D11Device*  pd3dDevice, ID3D11DeviceContext*    pImmediateContext);
	bool					CreateFrustum();
	void					ExtractPlanesD3D(CollisionPlane* pPlanes, const TMatrix & comboTMatrix);
	BOOL					CheckOBBInPlane(CollisionBox*  pBox);
	T_POSITION				CheckPoitionOBBInPlane(CollisionBox*  pBox);
public:
	bool		Init();
	bool		Frame();
	bool		PreRender(ID3D11DeviceContext* pContext);
	bool		PostRender(ID3D11DeviceContext* pContext);
	bool		Render(ID3D11DeviceContext* pContext);
	bool		Release();
	bool		ResetDevice();
	bool		ResetResource();
public:
	Frustum();
	~Frustum();
};