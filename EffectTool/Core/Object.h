#pragma once
#include "CoreSTD.h"
#include "Texture.h"

class Object
{
public:
	//--------------------------------------------------------------------------------------
	// 버텍스 버퍼 및 레이아웃
	//--------------------------------------------------------------------------------------
	ID3D11InputLayout*							m_pVertexLayout;
	ID3D11Buffer*								m_pVertexBuffer;
	ID3D11Buffer*								m_pIndexBuffer;
	ID3D11Buffer*								m_pConstantBuffer;
	//--------------------------------------------------------------------------------------
	// 버텍스 및 픽셀 쉐이더
	//--------------------------------------------------------------------------------------
	ID3D11VertexShader*							m_pVS;
	ID3D11PixelShader*							m_pPS;
	ID3D11PixelShader*							m_pMainPS;
	ID3D11GeometryShader*						m_pGS;
	ID3DBlob*									m_pVSBlob;
	//--------------------------------------------------------------------------------------
	// Vertex List
	//--------------------------------------------------------------------------------------
	vector<PNCT_VERTEX>							m_VertexList;
	vector<DWORD>								m_IndexList;
	VSCBMatrix									m_cbData;
	UINT										m_iNumVertex;
	UINT										m_iNumIndex;
	//--------------------------------------------------------------------------------------
	// 텍스쳐 로딩 및 리소스버퍼 생성
	//--------------------------------------------------------------------------------------
	Texture*									m_pTexture;
	//--------------------------------------------------------------------------------------
	// 텍스쳐 이름
	//--------------------------------------------------------------------------------------
	T_STR										m_pszTextureName;
	//--------------------------------------------------------------------------------------
	// 뷰, 투영 행렬 
	//--------------------------------------------------------------------------------------
	TMatrix										m_matWorld;
	TMatrix										m_matView;
	TMatrix										m_matProj;
	//--------------------------------------------------------------------------------------
	// 오브젝트 바운딩박스
	//--------------------------------------------------------------------------------------
	CollisionBox								m_BoundingBox;
	CollisionBox								m_InitBox;
	CollisionSphere								m_BoundingSphere;
	CollisionPlane								m_BoundingPlane;
	//--------------------------------------------------------------------------------------
	// 오브젝트 위치
	//--------------------------------------------------------------------------------------
	TVector3									m_vPos;
	TVector3									m_vLook;
public:
	//--------------------------------------------------------------------------------------
	// 삼각형 생성 및 초기화
	//--------------------------------------------------------------------------------------
	virtual		HRESULT			Create(T_STR textureName = _T(""), T_STR vertexShaderName = _T(""),
									   T_STR pixelShaderName = _T(""), T_STR geometryShaderName = _T(""));
	//--------------------------------------------------------------------------------------
	// 정점 버퍼 생성
	//--------------------------------------------------------------------------------------
	virtual		bool			CreateVertexData();
	virtual		HRESULT			CreateVertexBuffer();
	//--------------------------------------------------------------------------------------
	// 인덱스 버퍼 생성
	//--------------------------------------------------------------------------------------
	virtual		bool			CreateIndexData();
	virtual		HRESULT			CreateIndexBuffer();
	//--------------------------------------------------------------------------------------
	// 상수 버퍼 생성
	//--------------------------------------------------------------------------------------
	virtual		HRESULT			CreateConstantBuffer();
	//--------------------------------------------------------------------------------------
	// 정점 및 픽셀 쉐이더 로드
	//--------------------------------------------------------------------------------------
	virtual		HRESULT			LoadShader(T_STR vertexShaderName = _T(""),
											 T_STR pixelShaderName = _T(""), T_STR geometryShaderName = _T(""));
	//--------------------------------------------------------------------------------------
	// 정점 레이아웃 생성
	//--------------------------------------------------------------------------------------
	virtual		HRESULT			CreateVertexLayout();
	//--------------------------------------------------------------------------------------
	// 텍스처 불러오기 / 적용
	//--------------------------------------------------------------------------------------
	HRESULT						LoadTexture(T_STR szFilePath);
	//--------------------------------------------------------------------------------------
	// 행렬(뷰, 투영) 생성
	//--------------------------------------------------------------------------------------
	bool						SetMatrix(TMatrix* matWorld, TMatrix* matView, TMatrix* matProj);
	//--------------------------------------------------------------------------------------
	// 충돌 객체 정보 저장
	//--------------------------------------------------------------------------------------
	bool						ComputeBoungigBox(TMatrix* matWorld = nullptr);
	//--------------------------------------------------------------------------------------
	// 오브젝트 위치 저장
	//--------------------------------------------------------------------------------------
	virtual bool				UpdateBoundingBox(CollisionBox& box, TMatrix& matrix);
	//--------------------------------------------------------------------------------------
	// 오브젝트 위치 저장
	//--------------------------------------------------------------------------------------
	void						SetPosition(TVector3 vPos);
public:
	bool						Init();
	bool						Frame();
	virtual bool				PreRender(ID3D11DeviceContext* pContext);
	virtual bool				Render(ID3D11DeviceContext* pContext);
	virtual bool				PostRender(ID3D11DeviceContext* pContext, UINT iNumIndex);
	virtual bool				Draw(ID3D11DeviceContext* pContext, TVector3 vStart, TVector3 vEnd, TVector4 dwColor);
	virtual bool				Release();
public:
	Object();
	~Object();
};

